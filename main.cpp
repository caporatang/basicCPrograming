//#include <iostream>
//// 선행처리란?
//// C++ 프로그램을 컴파일하기 전에 소스 프로그램을 가공하여 컴파일러가 실제로 번역할 소스 프로그램을 만드는 것
//// 선행처리기 지시어 : #
//// 선행처리기 지시어 문장은 한 행에 한 개의 문장을 작성함
//
//// 대표적인 성행처리
//// 1. 헤더파일 삽입 : #include
//// 2. 매크로 선언 및 해제 : #define, #undef
//// 3. 조건부 컴파일 : #if, #ifdef, #ifndef
//
//
//using namespace std;
//
//int main() // 머리부
//{
//    // 몸체 "블록"
//    std::cout << "나의 첫 번째 C++ 프로그램" << std::endl;
//
//    // std::cout 객체
//    // 표준 출력 스트림 객체, 데이터를 문자열로 변환하여 출력, 출력 연산자(삽입 연산자) : <<
//    int a = 10;
//    std::cout << "a의 값은";
//    std::cout << a << "입니다." << std::endl;
//
//    // std::cin 객체
//    // 표준 입력 스트림 객체, 문자열을 입력 변수의 자료형의 값으로 변환하여 입력함
//    // 입력 연산자(추출 연산자) : >>
//    // 백색 공백 문자(빈칸, 탭, 새줄 문자) 는 구분 문자로 취급
//    int a2;
//    char str[100];
//    std::cin >> a2 >> str;
//
//
//    // using 키워드 사용
//    cout << "나의 첫 번쨰 C++ 프로그램" << endl;
//
//    return 0;
//}
//
//namespace myNSpc {
//    // 명칭 공간 : 다른 영역의 명칭 선언과 무관하게 명칭공간 내에서 자유롭게 명칭을 선언하여 사용할 수 있음
//    // 동일한 명칭이라도 서로 다른 명칭공간에서 정의 되었다면 별개의 것으로 구분함 : 여러 프로그래머가 작성한 프로그램을 결합하여 완성할 경우 각자 필요한 명칭을 독립적으로 사용 가능
//    // 전역 명칭 공간 : 특정 명칭공간에 속하지 않는 기본 명칭공간
//    // std 명칭공간 : 표준 C++ 라이브러리의 명칭들이 정의되어 있는 명칭 공간
//
//    int count; // 명칭을 선언하는 문장 나열
//
//    //명칭공간 외부에서는 소속 명칭공간을 지정하여 사용해야 함
//    // myNSpc::count = 0;
//
//    // 'using'을 이용한 명칭공간 사용 : 특정 명칭공간이나 명칭공간 내의 특정 이름을 자주 사용하는 경우 명칭공간 지정을 간소화 할 수 있음.
//}
//
//
//
//
//
